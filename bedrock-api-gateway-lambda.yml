# NOTICE: Use at your own risk!
# The code provided here is for educational/example purposes only. It is provided "as is" without warranty of any kind. Use at your own risk. The author accepts no liability for any damages or losses resulting from its use.
# Follow your organization's security guidelines.

# INSTRUCTIONS
# !! This template assumes you've completed the following 4 steps !!
# 1. Create an S3 bucket called something like "uniqueprefix-lambda-layers"
# 2. Create a "subfolder" called, "python-layers"
# 3. "lambda-layer-python-sdk-1.34.39.zip" into that subfolder.  The S3 pseudo-pathing would be something like, "uniqueprefix-lambda-layers/python-layers/lambda-layer-python-sdk-1.34.39.zip"
# 4. IMPORTANT:  Copy the s3 bucket name and place below.  Search for the comment "USE BUCKET NAME"


# DEPLOYMENT AND STACK MANAGEMENT
# Usage from command line:
# CREATE
#   aws cloudformation create-stack --stack-name bedrock-workshop --capabilities CAPABILITY_NAMED_IAM --template-body file://cf.yml --region <<YOUR-REGION>>
# UPDATE
#   aws cloudformation update-stack --stack-name bedrock-workshop --capabilities CAPABILITY_NAMED_IAM --template-body file://cf.yml --region <<YOUR-REGION>>
# DELETE
#   aws cloudformation delete-stack --stack-name bedrock-workshop --region <<YOUR-REGION>>

# Bonus Resources:
# CFN-NAG
## https://github.com/stelligent/cfn_nag
# IAM Policy Validator for AWS CloudFormation
## https://github.com/awslabs/aws-cloudformation-iam-policy-validator


AWSTemplateFormatVersion: "2010-09-09"
Resources:

### S3 Bucket
  AmazonBedrockAPIStackS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub
        - amazon-bedrock-api-${postfix}
        - postfix: !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId]]]]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

### VPC with two public subnets and 2 private subnets
  AmazonBedrockAPIVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AmazonBedrockAPIVPC
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AmazonBedrockAPIVPC
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false

### Security group
  AmazonBedrockAPISecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: AmazonBedrockAPISecurityGroup
      GroupDescription: Self-referencing security group for Bedrock workshop
      VpcId: !Ref AmazonBedrockAPIVPC
  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AmazonBedrockAPISecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref AmazonBedrockAPISecurityGroup
  SecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref AmazonBedrockAPISecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      CidrIp: 0.0.0.0/0

### VPC interface endpoint to bedrock-runtime
  BedrockInterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: 'Interface'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.bedrock-runtime'
      VpcId: !Ref AmazonBedrockAPIVPC
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref AmazonBedrockAPISecurityGroup

### IAM Role for Lambda Function
  AmazonBedrockAPIStackLambdaFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: AmazonBedrockAPIStackLambdaFunctionRole
      Description: "IAM role for Lambda function."
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      MaxSessionDuration: 3600
      Policies:
        - PolicyName: AmazonBedrockAPIStackLambdaFunctionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'bedrock:InvokeModel'
                  - 'bedrock:InvokeModelWithResponseStream'
                  - 'bedrock:ListFoundationModels'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'aoss:APIAccessAll'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'

  # VPC Endpoint
  AmazonBedrockAPIVpcEndpoint:
    Type: 'AWS::OpenSearchServerless::VpcEndpoint'
    Properties:
      Name: amazon-bedrock-api-vpc-endpoint
      VpcId: !Ref AmazonBedrockAPIVPC
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !GetAtt AmazonBedrockAPISecurityGroup.GroupId

  ### OpenSearch Serverless Collection
  AmazonBedrockAPICollectionAccessPolicy:
    Type: 'AWS::OpenSearchServerless::AccessPolicy'
    Properties:
      Name: amazon-bedrock-api-access-policy
      Type: data
      Description: Access policy
      Policy: !Sub >-
        [{"Description":"Access for worshop roles","Rules":[{"ResourceType":"index","Resource":["index/*/*"],"Permission":["aoss:*"]},
        {"ResourceType":"collection","Resource":["collection/*"],"Permission":["aoss:*"]}],
        "Principal":["arn:aws:iam::${AWS::AccountId}:role/AmazonBedrockAPIStackSageMakerRole", "arn:aws:iam::${AWS::AccountId}:role/AmazonBedrockAPIStackLambdaFunctionRole"]}]
  AmazonBedrockAPINetworkPolicy:
    Type: 'AWS::OpenSearchServerless::SecurityPolicy'
    Properties:
      Name: amazonbedrockapinetworkpolicy
      Type: network
      Description: Network policy
      Policy: !Sub >-
        [{"Rules":[{"ResourceType":"collection","Resource":["collection/*"]}, {"ResourceType":"dashboard","Resource":["collection/*"]}],"AllowFromPublic":false, "SourceVPCEs": ["${AmazonBedrockAPIVpcEndpoint.Id}"]}]
  AmazonBedrockAPIEncryptionPolicy:
    Type: 'AWS::OpenSearchServerless::SecurityPolicy'
    Properties:
      Name: amazonbedrockapiencryptionpolicy
      Type: encryption
      Description: Encryption policy
      Policy: >-
        {"Rules":[{"ResourceType":"collection","Resource":["collection/*"]}],"AWSOwnedKey":true}
  AmazonBedrockAPIStackOpenSearchServerlessCollection:
    Type: AWS::OpenSearchServerless::Collection
    DeletionPolicy: Delete
    Properties:
      Name: amazonbedrockapicollection
      Type: VECTORSEARCH
    DependsOn: AmazonBedrockAPIEncryptionPolicy

### Lambda Layer
### USE BUCKET NAME - Replace "REPLACEWITHBUCKETNAMEHERE" with your copied bucket name from Instructions Step 4.
  PythonBoto3Layer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: bedrock-required-python-modules
      Description: Lambda layer for requireed boto3 python module.  This version is boto3 1.34.39
      Content:
        S3Bucket: REPLACEWITHBUCKETNAMEHERE
        S3Key: python-layers/lambda-layer-python-sdk-1.34.39.zip
      CompatibleRuntimes:
        - python3.11
        - python3.12

### Lambda Function
  AmazonBedrockAPIStackLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AmazonBedrockAPILambda
      Runtime: python3.12
      MemorySize: 128
      Role: !GetAtt AmazonBedrockAPIStackLambdaFunctionRole.Arn
      Handler: index.lambda_handler
      Timeout: 15
      Environment:
        Variables:
          aossHost: !GetAtt AmazonBedrockAPIStackOpenSearchServerlessCollection.CollectionEndpoint
      Code:
        ZipFile: |
          import json
          import boto3

          def setup_bedrock_runtime():
              session = boto3.Session()

              bedrock = session.client(
                  service_name='bedrock-runtime'
              )
              return bedrock

          def lambda_handler(event, context):

              """
                  define user prompt from test event.

                  Lambda Test Event:
                  {
                      "prompt":"Tell me about blackholes"
                  }
              """
              user_prompt = event['prompt']

              # Setup AWS SDK for Python
              boto3_bedrock = setup_bedrock_runtime()

              # Concatenate Claude's prompt template with the user's input'
              prompt=f"""Human: {user_prompt}
              Assistant:
              """

              #select your bedrock model
              bedrock_model_id="anthropic.claude-instant-v1"

              # define your inference parameters
              claude_inference_configuration = {
                  'temperature': 0.1,
                  'top_p': 0.999,
                  'top_k': 250,
                  'max_tokens_to_sample': 200,
                  'prompt': prompt
              }

              # setup request payload
              payload = json.dumps(claude_inference_configuration)
              body = payload
              accept = 'application/json'
              contentType = 'application/json'

              #invoke bedrock
              response = boto3_bedrock.invoke_model(
                  body=body,
                  modelId=bedrock_model_id,
                  accept=accept,
                  contentType=contentType
              )

              # load response into a json object
              response_body = json.loads(response.get('body').read())

              # print out the response for debugging purposes (this shows up in the lambda execution result)
              print(response_body)

              # Return Lambda Response
              return {
                  'statusCode': 200,
                  'body': response_body['completion']
              }

      Layers:
        - !Ref PythonBoto3Layer
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt AmazonBedrockAPISecurityGroup.GroupId
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

### API Gateway
# https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-private-apis.html
  AmazonBedrockAPIStackAPIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: AmazonBedrockAPILambda
      EndpointConfiguration:
        Types:
          - PRIVATE
        VpcEndpointIds:
          - !Ref AmazonBedrockAPIVpcEndpoint
      Policy:
        Version: "2012-10-17"
        Type:
          Statement:
            - Effect: Allow
              Action:
                - 'execute-api:Invoke'
              Resource:
                - 'execute-api:/*'
            - Effect: Deny
              Action:
                - 'execute-api:Invoke'
              Resource:
                - 'execute-api:/*'
              Condition:
                StringNotEquals:
                  "aws:SourceVpc": !Ref AmazonBedrockAPIVPC

  AmazonBedrockAPIStackAPIGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt AmazonBedrockAPIStackLambdaFunction.Arn
      ResourceId: !GetAtt AmazonBedrockAPIStackAPIGateway.RootResourceId
      RestApiId: !Ref AmazonBedrockAPIStackAPIGateway
  LambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AmazonBedrockAPIStackLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*
  AmazonBedrockAPIStackAPIGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - AmazonBedrockAPIStackAPIGatewayRootMethod
    Properties:
      RestApiId: !Ref AmazonBedrockAPIStackAPIGateway
      StageName: demo